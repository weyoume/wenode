file(GLOB HEADERS "include/node/chain/*.hpp" "include/node/chain/util/*.hpp")

if( MSVC )
   set( hardfork_hpp_file "${CMAKE_CURRENT_SOURCE_DIR}/include/node/chain/hardfork.hpp" )
   add_custom_target( build_hardfork_hpp
      COMMAND cat-parts "${CMAKE_CURRENT_SOURCE_DIR}/hardfork.d" ${hardfork_hpp_file} )
   add_dependencies( build_hardfork_hpp cat-parts )
else( MSVC )
   set( hardfork_hpp_file "${CMAKE_CURRENT_BINARY_DIR}/include/node/chain/hardfork.hpp" )
   add_custom_target( build_hardfork_hpp
      COMMAND "${CMAKE_SOURCE_DIR}/programs/build_helpers/cat_parts.py" "${CMAKE_CURRENT_SOURCE_DIR}/hardfork.d" ${hardfork_hpp_file} )
endif( MSVC )


set_source_files_properties( "${CMAKE_CURRENT_BINARY_DIR}/include/node/chain/hardfork.hpp" PROPERTIES GENERATED TRUE )

## SORT .cpp by most likely to change / break compile

add_library( node_chain
   node_database.cpp
   account_database.cpp
   business_database.cpp
   governance_database.cpp
   network_database.cpp
   comment_database.cpp
   community_database.cpp
   ad_database.cpp
   graph_database.cpp
   transfer_database.cpp
   balance_database.cpp
   marketplace_database.cpp
   trading_database.cpp
   pool_database.cpp
   asset_database.cpp
   producer_database.cpp
   
   fork_database.cpp
   producer_schedule.cpp

   account_evaluator.cpp
   business_evaluator.cpp
   governance_evaluator.cpp
   network_evaluator.cpp
   comment_evaluator.cpp
   community_evaluator.cpp
   ad_evaluator.cpp
   graph_evaluator.cpp
   transfer_evaluator.cpp
   balance_evaluator.cpp
   marketplace_evaluator.cpp
   trading_evaluator.cpp
   pool_evaluator.cpp
   asset_evaluator.cpp
   producer_evaluator.cpp
   custom_evaluator.cpp

   node_objects.cpp
   shared_authority.cpp
   block_log.cpp

   util/reward.cpp

   ${HEADERS}
   ${hardfork_hpp_file}
   "${CMAKE_CURRENT_BINARY_DIR}/include/node/chain/hardfork.hpp"
)

add_dependencies( node_chain node_protocol build_hardfork_hpp )
target_link_libraries( node_chain node_protocol fc chainbase graphene_schema ${PATCH_MERGE_LIB} )
target_include_directories( node_chain
   PUBLIC "${CMAKE_CURRENT_SOURCE_DIR}/include" "${CMAKE_CURRENT_BINARY_DIR}/include" )

if(MSVC)
  set_source_files_properties( network_database.cpp PROPERTIES COMPILE_FLAGS "/bigobj" )
endif(MSVC)

INSTALL( TARGETS
   node_chain

   RUNTIME DESTINATION bin
   LIBRARY DESTINATION lib
   ARCHIVE DESTINATION lib
)
INSTALL( FILES ${HEADERS} DESTINATION "include/node/chain" )
